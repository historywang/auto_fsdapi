{
  "uid" : "c397e169313f291a",
  "name" : "创建用户",
  "fullName" : "test_case.test_api.TestCase#test_autoapi",
  "historyId" : "0a7feacb9216101b0720c5200e1957f4",
  "time" : {
    "start" : 1611827086254,
    "stop" : 1611827086348,
    "duration" : 94
  },
  "description" : "创建用户",
  "descriptionHtml" : "<p>创建用户</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 期望码201,实际响应码200,失败",
  "statusTrace" : "self = <test_case.test_api.TestCase object at 0x0000021C922C9128>, casedatas = {'caseid': 'FSD0010', 'casestroy': '创建用户', 'casetitle': '创建用户', 'content-type': 'application/json', ...}\n\n    @allure.feature(\"FSD3.2接口测试\")\n    @pytest.mark.parametrize(\"casedatas\",replycls.get_cases())\n    def test_autoapi(self, casedatas):\n        caseid=casedatas['caseid']\n        url= casedatas['url']\n        method=casedatas['method']\n        content_type=casedatas.get('content-type')\n        headers = {\n            \"Authorization\": \"Bearer \" + TOKEN\n        }\n        if content_type:\n            headers[\"content-type\"] = content_type\n        datas = casedatas.get('datas')\n        if datas:\n            datas = json.loads(datas)\n        #前置条件，即用例依赖\n        preconditions=casedatas.get('preconditions')\n        relykeys=casedatas.get('relykey')\n        if relykeys and preconditions:\n            datas=replycls.get_reply_value(preconditions,datas,relykeys)\n            replycls.set_cellvalue(caseid,datas,1)\n    \n        # statusMsg=casedatas['statusMsg']\n        file=casedatas['file']\n        dic_allure={\n            \"title\":casedatas['casetitle'],\n            \"story\":casedatas['casestroy'],\n            \"description\":casedatas['description'],\n            \"exportfile\":casedatas['exportfile']\n        }\n        exp_code=casedatas['exp_code']\n        exp_msg=casedatas['exp_msg']\n        req_code,req_txt= RC.Sendrequest(method,url=url, data=datas,headers=headers ,files=file,Content_Type=content_type,**dic_allure)\n        replycls.set_cellvalue(caseid,req_txt,2)\n>       asster.assert_code(req_code,exp_code)\n\ntest_case\\test_api.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <comn.asserter.Assertion object at 0x0000021C9222F0B8>, code = 200, exp_code = 201\n\n    def assert_code(self,code,exp_code):\n        '''\n        断言响应码，并将结果写入日志\n        :param code: 实际响应码\n        :param exp_code: 期望码\n        :return:\n        '''\n        try:\n>           assert code==exp_code,\"期望码{},实际响应码{},失败\".format(exp_code,code)\nE           AssertionError: 期望码201,实际响应码200,失败\n\ncomn\\asserter.py:29: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1611827086254,
      "stop" : 1611827086254,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "创建用户",
    "status" : "failed",
    "statusMessage" : "AssertionError: 期望码201,实际响应码200,失败",
    "statusTrace" : "self = <test_case.test_api.TestCase object at 0x0000021C922C9128>, casedatas = {'caseid': 'FSD0010', 'casestroy': '创建用户', 'casetitle': '创建用户', 'content-type': 'application/json', ...}\n\n    @allure.feature(\"FSD3.2接口测试\")\n    @pytest.mark.parametrize(\"casedatas\",replycls.get_cases())\n    def test_autoapi(self, casedatas):\n        caseid=casedatas['caseid']\n        url= casedatas['url']\n        method=casedatas['method']\n        content_type=casedatas.get('content-type')\n        headers = {\n            \"Authorization\": \"Bearer \" + TOKEN\n        }\n        if content_type:\n            headers[\"content-type\"] = content_type\n        datas = casedatas.get('datas')\n        if datas:\n            datas = json.loads(datas)\n        #前置条件，即用例依赖\n        preconditions=casedatas.get('preconditions')\n        relykeys=casedatas.get('relykey')\n        if relykeys and preconditions:\n            datas=replycls.get_reply_value(preconditions,datas,relykeys)\n            replycls.set_cellvalue(caseid,datas,1)\n    \n        # statusMsg=casedatas['statusMsg']\n        file=casedatas['file']\n        dic_allure={\n            \"title\":casedatas['casetitle'],\n            \"story\":casedatas['casestroy'],\n            \"description\":casedatas['description'],\n            \"exportfile\":casedatas['exportfile']\n        }\n        exp_code=casedatas['exp_code']\n        exp_msg=casedatas['exp_msg']\n        req_code,req_txt= RC.Sendrequest(method,url=url, data=datas,headers=headers ,files=file,Content_Type=content_type,**dic_allure)\n        replycls.set_cellvalue(caseid,req_txt,2)\n>       asster.assert_code(req_code,exp_code)\n\ntest_case\\test_api.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <comn.asserter.Assertion object at 0x0000021C9222F0B8>, code = 200, exp_code = 201\n\n    def assert_code(self,code,exp_code):\n        '''\n        断言响应码，并将结果写入日志\n        :param code: 实际响应码\n        :param exp_code: 期望码\n        :return:\n        '''\n        try:\n>           assert code==exp_code,\"期望码{},实际响应码{},失败\".format(exp_code,code)\nE           AssertionError: 期望码201,实际响应码200,失败\n\ncomn\\asserter.py:29: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "703f3878c04785a8",
      "name" : "请求url",
      "source" : "703f3878c04785a8.attach",
      "type" : "text/plain",
      "size" : 51
    }, {
      "uid" : "b729807e97726e59",
      "name" : "请求方式",
      "source" : "b729807e97726e59.attach",
      "type" : "text/plain",
      "size" : 4
    }, {
      "uid" : "ef6ec1cff478cbe9",
      "name" : "请求头",
      "source" : "ef6ec1cff478cbe9.attach",
      "type" : "text/plain",
      "size" : 100
    }, {
      "uid" : "c198d3068249ce02",
      "name" : "请求参数",
      "source" : "c198d3068249ce02.attach",
      "type" : "text/plain",
      "size" : 127
    }, {
      "uid" : "e3c631dc03ca2f21",
      "name" : "log",
      "source" : "e3c631dc03ca2f21.txt",
      "type" : "text/plain",
      "size" : 85
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 5
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "创建用户"
  }, {
    "name" : "feature",
    "value" : "FSD3.2接口测试"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestCase"
  }, {
    "name" : "host",
    "value" : "uy7-lkjhh"
  }, {
    "name" : "thread",
    "value" : "13992-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "casedatas",
    "value" : "{'caseid': 'FSD0010', 'casestroy': '创建用户', 'casetitle': '创建用户', 'description': '创建用户', 'url': '/gateway/user/user/createUser', 'method': 'POST', 'content-type': 'application/json', 'datas': '{\\n    \"username\": \"fsd001\",\\n    \"name\": \"fsd001\",\\n    \"groupId\": 73,\\n    \"email\": \"fsd001@troila.com\",\\n    \"phone\": \"17145785412\",\\n    \"userPlotId\": \"\"\\n}', 'statusMsg': '[\\n    \"statusMsg\",\\n    \"detailErrorReason\",\\n    \"statusCode\"\\n]', 'file': None, 'isrun': True, 'relykey': 'groupId', 'preconditions': 'FSD0003->$.infoData.list[0].id', 'exportfile': None, 'response_data': '{\\n    \"statusMsg\": \"用户名已存在\",\\n    \"detailErrorReason\": \"用户名已存在\",\\n    \"statusCode\": 1\\n}', 'exp_code': 201, 'exp_msg': '操作成功'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "ac1632df5f1b0b30",
      "status" : "failed",
      "statusDetails" : "AssertionError: 期望码201,实际响应码200,失败",
      "time" : {
        "start" : 1611827044438,
        "stop" : 1611827044525,
        "duration" : 87
      }
    }, {
      "uid" : "712990575bf4d803",
      "status" : "failed",
      "statusDetails" : "AssertionError: 期望码201,实际响应码200,失败",
      "time" : {
        "start" : 1611827014175,
        "stop" : 1611827014268,
        "duration" : 93
      }
    }, {
      "uid" : "3f004c2a3c606eb2",
      "status" : "failed",
      "statusDetails" : "AssertionError: 期望码201,实际响应码200,失败",
      "time" : {
        "start" : 1611826936644,
        "stop" : 1611826936738,
        "duration" : 94
      }
    }, {
      "uid" : "b0ae04e12b4a8ebe",
      "status" : "failed",
      "statusDetails" : "AssertionError: 期望码201,实际响应码200,失败",
      "time" : {
        "start" : 1611826887811,
        "stop" : 1611826887905,
        "duration" : 94
      }
    }, {
      "uid" : "f4cae057a50dd684",
      "status" : "failed",
      "statusDetails" : "AssertionError: 期望码201,实际响应码200,失败",
      "time" : {
        "start" : 1611826854948,
        "stop" : 1611826855005,
        "duration" : 57
      }
    }, {
      "uid" : "7fdfb220c24a6dd9",
      "status" : "failed",
      "statusDetails" : "AssertionError: 期望码201,实际响应码200,失败",
      "time" : {
        "start" : 1611817807417,
        "stop" : 1611817807527,
        "duration" : 110
      }
    }, {
      "uid" : "5b9917d2758f9fb3",
      "status" : "failed",
      "statusDetails" : "AssertionError: 期望码201,实际响应码200,失败",
      "time" : {
        "start" : 1611817617644,
        "stop" : 1611817617738,
        "duration" : 94
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c397e169313f291a.json",
  "parameterValues" : [ "{'caseid': 'FSD0010', 'casestroy': '创建用户', 'casetitle': '创建用户', 'description': '创建用户', 'url': '/gateway/user/user/createUser', 'method': 'POST', 'content-type': 'application/json', 'datas': '{\\n    \"username\": \"fsd001\",\\n    \"name\": \"fsd001\",\\n    \"groupId\": 73,\\n    \"email\": \"fsd001@troila.com\",\\n    \"phone\": \"17145785412\",\\n    \"userPlotId\": \"\"\\n}', 'statusMsg': '[\\n    \"statusMsg\",\\n    \"detailErrorReason\",\\n    \"statusCode\"\\n]', 'file': None, 'isrun': True, 'relykey': 'groupId', 'preconditions': 'FSD0003->$.infoData.list[0].id', 'exportfile': None, 'response_data': '{\\n    \"statusMsg\": \"用户名已存在\",\\n    \"detailErrorReason\": \"用户名已存在\",\\n    \"statusCode\": 1\\n}', 'exp_code': 201, 'exp_msg': '操作成功'}" ]
}