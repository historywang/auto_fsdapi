{
  "uid" : "849ba122720b512",
  "name" : "创建桌面组",
  "fullName" : "test_case.test_api.TestCase#test_autoapi",
  "historyId" : "e338300e83c121567b5ef2dc6d7b96e2",
  "time" : {
    "start" : 1611817616909,
    "stop" : 1611817617003,
    "duration" : 94
  },
  "description" : "创建桌面组",
  "descriptionHtml" : "<p>创建桌面组</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
  "statusTrace" : "self = <test_case.test_api.TestCase object at 0x00000282AEF24C50>, casedatas = {'caseid': 'FSD0002', 'casestroy': '创建桌面组', 'casetitle': '创建桌面组', 'content-type': 'application/json', ...}\n\n    @allure.feature(\"FSD3.2接口测试\")\n    @pytest.mark.parametrize(\"casedatas\",replycls.get_cases())\n    def test_autoapi(self, casedatas):\n        caseid=casedatas['caseid']\n        url= casedatas['url']\n        method=casedatas['method']\n        content_type=casedatas.get('content-type')\n        headers = {\n            \"Authorization\": \"Bearer \" + TOKEN\n        }\n        if content_type:\n            headers[\"content-type\"] = content_type\n        datas = casedatas.get('datas')\n        if datas:\n            datas = json.loads(datas)\n        #前置条件，即用例依赖\n        preconditions=casedatas.get('preconditions')\n        relykeys=casedatas.get('relykey')\n        if relykeys and preconditions:\n            datas=replycls.get_reply_value(preconditions,datas,relykeys)\n            replycls.set_cellvalue(caseid,datas,1)\n    \n        # statusMsg=casedatas['statusMsg']\n        file=casedatas['file']\n        dic_allure={\n            \"title\":casedatas['casetitle'],\n            \"story\":casedatas['casestroy'],\n            \"description\":casedatas['description'],\n            \"exportfile\":casedatas['exportfile']\n        }\n        exp_code=casedatas['exp_code']\n        exp_msg=casedatas['exp_msg']\n        req_code,req_txt= RC.Sendrequest(method,url=url, data=datas,headers=headers ,files=file,Content_Type=content_type,**dic_allure)\n        replycls.set_cellvalue(caseid,req_txt,2)\n        asster.assert_code(req_code,exp_code)\n>       asster.assert_in_body(req_txt,exp_msg)\n\ntest_case\\test_api.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <comn.asserter.Assertion object at 0x00000282C66086D8>, msg = '{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}', exp_msg = '操作成功'\n\n    def assert_in_body(self,msg,exp_msg):\n        '''\n        断言期望结果是否在实际结果中\n        :param msg:\n        :param exp_msg:\n        :return:\n        '''\n        try:\n            msg=json.dumps(msg,ensure_ascii=False)\n>           assert exp_msg in msg,\"实际结果{}并不包含期望内容,期望内容是{},失败\".format(msg,exp_msg)\nE           AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败\n\ncomn\\asserter.py:40: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1611817616909,
      "stop" : 1611817616909,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "创建桌面组",
    "status" : "failed",
    "statusMessage" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
    "statusTrace" : "self = <test_case.test_api.TestCase object at 0x00000282AEF24C50>, casedatas = {'caseid': 'FSD0002', 'casestroy': '创建桌面组', 'casetitle': '创建桌面组', 'content-type': 'application/json', ...}\n\n    @allure.feature(\"FSD3.2接口测试\")\n    @pytest.mark.parametrize(\"casedatas\",replycls.get_cases())\n    def test_autoapi(self, casedatas):\n        caseid=casedatas['caseid']\n        url= casedatas['url']\n        method=casedatas['method']\n        content_type=casedatas.get('content-type')\n        headers = {\n            \"Authorization\": \"Bearer \" + TOKEN\n        }\n        if content_type:\n            headers[\"content-type\"] = content_type\n        datas = casedatas.get('datas')\n        if datas:\n            datas = json.loads(datas)\n        #前置条件，即用例依赖\n        preconditions=casedatas.get('preconditions')\n        relykeys=casedatas.get('relykey')\n        if relykeys and preconditions:\n            datas=replycls.get_reply_value(preconditions,datas,relykeys)\n            replycls.set_cellvalue(caseid,datas,1)\n    \n        # statusMsg=casedatas['statusMsg']\n        file=casedatas['file']\n        dic_allure={\n            \"title\":casedatas['casetitle'],\n            \"story\":casedatas['casestroy'],\n            \"description\":casedatas['description'],\n            \"exportfile\":casedatas['exportfile']\n        }\n        exp_code=casedatas['exp_code']\n        exp_msg=casedatas['exp_msg']\n        req_code,req_txt= RC.Sendrequest(method,url=url, data=datas,headers=headers ,files=file,Content_Type=content_type,**dic_allure)\n        replycls.set_cellvalue(caseid,req_txt,2)\n        asster.assert_code(req_code,exp_code)\n>       asster.assert_in_body(req_txt,exp_msg)\n\ntest_case\\test_api.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <comn.asserter.Assertion object at 0x00000282C66086D8>, msg = '{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}', exp_msg = '操作成功'\n\n    def assert_in_body(self,msg,exp_msg):\n        '''\n        断言期望结果是否在实际结果中\n        :param msg:\n        :param exp_msg:\n        :return:\n        '''\n        try:\n            msg=json.dumps(msg,ensure_ascii=False)\n>           assert exp_msg in msg,\"实际结果{}并不包含期望内容,期望内容是{},失败\".format(msg,exp_msg)\nE           AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败\n\ncomn\\asserter.py:40: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e109c31a8e50f24d",
      "name" : "请求url",
      "source" : "e109c31a8e50f24d.attach",
      "type" : "text/plain",
      "size" : 67
    }, {
      "uid" : "80c124b4ed28ab01",
      "name" : "请求头",
      "source" : "80c124b4ed28ab01.attach",
      "type" : "text/plain",
      "size" : 100
    }, {
      "uid" : "84ef82f0cf84868",
      "name" : "请求参数",
      "source" : "84ef82f0cf84868.attach",
      "type" : "text/plain",
      "size" : 138
    }, {
      "uid" : "94c48d0686806e2d",
      "name" : "log",
      "source" : "94c48d0686806e2d.txt",
      "type" : "text/plain",
      "size" : 225
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 4
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "创建桌面组"
  }, {
    "name" : "feature",
    "value" : "FSD3.2接口测试"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestCase"
  }, {
    "name" : "host",
    "value" : "uy7-lkjhh"
  }, {
    "name" : "thread",
    "value" : "4760-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "casedatas",
    "value" : "{'caseid': 'FSD0002', 'casestroy': '创建桌面组', 'casetitle': '创建桌面组', 'description': '创建桌面组', 'url': '/gateway/user/desktopGroup/createDesktopGroup', 'method': 'POST', 'content-type': 'application/json', 'datas': '{\\n    \"groupName\": \"api桌面组\",\\n    \"description\": \"api桌面组\",\\n    \"desktop\": 5,\\n    \"cpu\": 60,\\n    \"mem\": 60,\\n    \"disk\": 600,\\n    \"volume\": 5,\\n    \"modelMach\": 2\\n}', 'statusMsg': '[\\n    \"statusMsg\",\\n    \"detailErrorReason\",\\n    \"statusCode\"\\n]', 'file': None, 'isrun': True, 'relykey': None, 'preconditions': None, 'exportfile': None, 'response_data': '{\\n    \"statusMsg\": \"桌面组名称已存在\",\\n    \"detailErrorReason\": \"桌面组名称已存在\",\\n    \"statusCode\": 1\\n}', 'exp_code': 200, 'exp_msg': '操作成功'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "849ba122720b512.json",
  "parameterValues" : [ "{'caseid': 'FSD0002', 'casestroy': '创建桌面组', 'casetitle': '创建桌面组', 'description': '创建桌面组', 'url': '/gateway/user/desktopGroup/createDesktopGroup', 'method': 'POST', 'content-type': 'application/json', 'datas': '{\\n    \"groupName\": \"api桌面组\",\\n    \"description\": \"api桌面组\",\\n    \"desktop\": 5,\\n    \"cpu\": 60,\\n    \"mem\": 60,\\n    \"disk\": 600,\\n    \"volume\": 5,\\n    \"modelMach\": 2\\n}', 'statusMsg': '[\\n    \"statusMsg\",\\n    \"detailErrorReason\",\\n    \"statusCode\"\\n]', 'file': None, 'isrun': True, 'relykey': None, 'preconditions': None, 'exportfile': None, 'response_data': '{\\n    \"statusMsg\": \"桌面组名称已存在\",\\n    \"detailErrorReason\": \"桌面组名称已存在\",\\n    \"statusCode\": 1\\n}', 'exp_code': 200, 'exp_msg': '操作成功'}" ]
}