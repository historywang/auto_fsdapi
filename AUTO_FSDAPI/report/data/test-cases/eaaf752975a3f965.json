{
  "uid" : "eaaf752975a3f965",
  "name" : "修改桌面组",
  "fullName" : "test_case.test_api.TestCase#test_autoapi",
  "historyId" : "879ab8fd358fd3966f3e91883f6febae",
  "time" : {
    "start" : 1611827085807,
    "stop" : 1611827085951,
    "duration" : 144
  },
  "description" : "修改桌面组",
  "descriptionHtml" : "<p>修改桌面组</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
  "statusTrace" : "self = <test_case.test_api.TestCase object at 0x0000021C922885F8>, casedatas = {'caseid': 'FSD0005', 'casestroy': '修改桌面组', 'casetitle': '修改桌面组', 'content-type': 'application/json', ...}\n\n    @allure.feature(\"FSD3.2接口测试\")\n    @pytest.mark.parametrize(\"casedatas\",replycls.get_cases())\n    def test_autoapi(self, casedatas):\n        caseid=casedatas['caseid']\n        url= casedatas['url']\n        method=casedatas['method']\n        content_type=casedatas.get('content-type')\n        headers = {\n            \"Authorization\": \"Bearer \" + TOKEN\n        }\n        if content_type:\n            headers[\"content-type\"] = content_type\n        datas = casedatas.get('datas')\n        if datas:\n            datas = json.loads(datas)\n        #前置条件，即用例依赖\n        preconditions=casedatas.get('preconditions')\n        relykeys=casedatas.get('relykey')\n        if relykeys and preconditions:\n            datas=replycls.get_reply_value(preconditions,datas,relykeys)\n            replycls.set_cellvalue(caseid,datas,1)\n    \n        # statusMsg=casedatas['statusMsg']\n        file=casedatas['file']\n        dic_allure={\n            \"title\":casedatas['casetitle'],\n            \"story\":casedatas['casestroy'],\n            \"description\":casedatas['description'],\n            \"exportfile\":casedatas['exportfile']\n        }\n        exp_code=casedatas['exp_code']\n        exp_msg=casedatas['exp_msg']\n        req_code,req_txt= RC.Sendrequest(method,url=url, data=datas,headers=headers ,files=file,Content_Type=content_type,**dic_allure)\n        replycls.set_cellvalue(caseid,req_txt,2)\n        asster.assert_code(req_code,exp_code)\n>       asster.assert_in_body(req_txt,exp_msg)\n\ntest_case\\test_api.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <comn.asserter.Assertion object at 0x0000021C9222F0B8>, msg = '{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}', exp_msg = '操作成功'\n\n    def assert_in_body(self,msg,exp_msg):\n        '''\n        断言期望结果是否在实际结果中\n        :param msg:\n        :param exp_msg:\n        :return:\n        '''\n        try:\n            msg=json.dumps(msg,ensure_ascii=False)\n>           assert exp_msg in msg,\"实际结果{}并不包含期望内容,期望内容是{},失败\".format(msg,exp_msg)\nE           AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败\n\ncomn\\asserter.py:43: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1611827085807,
      "stop" : 1611827085807,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "修改桌面组",
    "status" : "failed",
    "statusMessage" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
    "statusTrace" : "self = <test_case.test_api.TestCase object at 0x0000021C922885F8>, casedatas = {'caseid': 'FSD0005', 'casestroy': '修改桌面组', 'casetitle': '修改桌面组', 'content-type': 'application/json', ...}\n\n    @allure.feature(\"FSD3.2接口测试\")\n    @pytest.mark.parametrize(\"casedatas\",replycls.get_cases())\n    def test_autoapi(self, casedatas):\n        caseid=casedatas['caseid']\n        url= casedatas['url']\n        method=casedatas['method']\n        content_type=casedatas.get('content-type')\n        headers = {\n            \"Authorization\": \"Bearer \" + TOKEN\n        }\n        if content_type:\n            headers[\"content-type\"] = content_type\n        datas = casedatas.get('datas')\n        if datas:\n            datas = json.loads(datas)\n        #前置条件，即用例依赖\n        preconditions=casedatas.get('preconditions')\n        relykeys=casedatas.get('relykey')\n        if relykeys and preconditions:\n            datas=replycls.get_reply_value(preconditions,datas,relykeys)\n            replycls.set_cellvalue(caseid,datas,1)\n    \n        # statusMsg=casedatas['statusMsg']\n        file=casedatas['file']\n        dic_allure={\n            \"title\":casedatas['casetitle'],\n            \"story\":casedatas['casestroy'],\n            \"description\":casedatas['description'],\n            \"exportfile\":casedatas['exportfile']\n        }\n        exp_code=casedatas['exp_code']\n        exp_msg=casedatas['exp_msg']\n        req_code,req_txt= RC.Sendrequest(method,url=url, data=datas,headers=headers ,files=file,Content_Type=content_type,**dic_allure)\n        replycls.set_cellvalue(caseid,req_txt,2)\n        asster.assert_code(req_code,exp_code)\n>       asster.assert_in_body(req_txt,exp_msg)\n\ntest_case\\test_api.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <comn.asserter.Assertion object at 0x0000021C9222F0B8>, msg = '{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}', exp_msg = '操作成功'\n\n    def assert_in_body(self,msg,exp_msg):\n        '''\n        断言期望结果是否在实际结果中\n        :param msg:\n        :param exp_msg:\n        :return:\n        '''\n        try:\n            msg=json.dumps(msg,ensure_ascii=False)\n>           assert exp_msg in msg,\"实际结果{}并不包含期望内容,期望内容是{},失败\".format(msg,exp_msg)\nE           AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败\n\ncomn\\asserter.py:43: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "32843e651b8a879d",
      "name" : "请求url",
      "source" : "32843e651b8a879d.attach",
      "type" : "text/plain",
      "size" : 67
    }, {
      "uid" : "343af000a21f4ecb",
      "name" : "请求方式",
      "source" : "343af000a21f4ecb.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "5a055f16a841384",
      "name" : "请求头",
      "source" : "5a055f16a841384.attach",
      "type" : "text/plain",
      "size" : 100
    }, {
      "uid" : "43c8a4b8e6abaf74",
      "name" : "请求参数",
      "source" : "43c8a4b8e6abaf74.attach",
      "type" : "text/plain",
      "size" : 154
    }, {
      "uid" : "568fda86e87c94e6",
      "name" : "log",
      "source" : "568fda86e87c94e6.txt",
      "type" : "text/plain",
      "size" : 225
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 5
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "修改桌面组"
  }, {
    "name" : "feature",
    "value" : "FSD3.2接口测试"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestCase"
  }, {
    "name" : "host",
    "value" : "uy7-lkjhh"
  }, {
    "name" : "thread",
    "value" : "13992-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "casedatas",
    "value" : "{'caseid': 'FSD0005', 'casestroy': '修改桌面组', 'casetitle': '修改桌面组', 'description': '修改桌面组', 'url': '/gateway/user/desktopGroup/updateDesktopGroup', 'method': 'PUT', 'content-type': 'application/json', 'datas': '{\\n    \"id\": 73,\\n    \"groupName\": \"api桌面组更新\",\\n    \"description\": \"api桌面组\",\\n    \"desktop\": 5,\\n    \"cpu\": 50,\\n    \"mem\": 50,\\n    \"disk\": 500,\\n    \"volume\": 5,\\n    \"modelMach\": 2\\n}', 'statusMsg': '[\\n    \"statusMsg\",\\n    \"detailErrorReason\",\\n    \"statusCode\"\\n]', 'file': None, 'isrun': True, 'relykey': 'id', 'preconditions': 'FSD0003->$.infoData.list[0].id', 'exportfile': None, 'response_data': '{\\n    \"statusMsg\": \"桌面组名称已存在\",\\n    \"detailErrorReason\": \"桌面组名称已存在\",\\n    \"statusCode\": 1\\n}', 'exp_code': 200, 'exp_msg': '操作成功'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "17f464449cc5e6a2",
      "status" : "failed",
      "statusDetails" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
      "time" : {
        "start" : 1611827044069,
        "stop" : 1611827044180,
        "duration" : 111
      }
    }, {
      "uid" : "d21af7bd44805d7f",
      "status" : "failed",
      "statusDetails" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
      "time" : {
        "start" : 1611827013798,
        "stop" : 1611827013913,
        "duration" : 115
      }
    }, {
      "uid" : "c2a11527b1285370",
      "status" : "failed",
      "statusDetails" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
      "time" : {
        "start" : 1611826936258,
        "stop" : 1611826936367,
        "duration" : 109
      }
    }, {
      "uid" : "d60906ee04b237fd",
      "status" : "failed",
      "statusDetails" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
      "time" : {
        "start" : 1611826887490,
        "stop" : 1611826887587,
        "duration" : 97
      }
    }, {
      "uid" : "a73e91ccac31ef9c",
      "status" : "failed",
      "statusDetails" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
      "time" : {
        "start" : 1611826854705,
        "stop" : 1611826854783,
        "duration" : 78
      }
    }, {
      "uid" : "5b005e656605eb7c",
      "status" : "failed",
      "statusDetails" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
      "time" : {
        "start" : 1611817806572,
        "stop" : 1611817806885,
        "duration" : 313
      }
    }, {
      "uid" : "f8a07cdce921bcfd",
      "status" : "failed",
      "statusDetails" : "AssertionError: 实际结果{\"statusMsg\": \"桌面组名称已存在\", \"detailErrorReason\": \"桌面组名称已存在\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
      "time" : {
        "start" : 1611817617191,
        "stop" : 1611817617332,
        "duration" : 141
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "eaaf752975a3f965.json",
  "parameterValues" : [ "{'caseid': 'FSD0005', 'casestroy': '修改桌面组', 'casetitle': '修改桌面组', 'description': '修改桌面组', 'url': '/gateway/user/desktopGroup/updateDesktopGroup', 'method': 'PUT', 'content-type': 'application/json', 'datas': '{\\n    \"id\": 73,\\n    \"groupName\": \"api桌面组更新\",\\n    \"description\": \"api桌面组\",\\n    \"desktop\": 5,\\n    \"cpu\": 50,\\n    \"mem\": 50,\\n    \"disk\": 500,\\n    \"volume\": 5,\\n    \"modelMach\": 2\\n}', 'statusMsg': '[\\n    \"statusMsg\",\\n    \"detailErrorReason\",\\n    \"statusCode\"\\n]', 'file': None, 'isrun': True, 'relykey': 'id', 'preconditions': 'FSD0003->$.infoData.list[0].id', 'exportfile': None, 'response_data': '{\\n    \"statusMsg\": \"桌面组名称已存在\",\\n    \"detailErrorReason\": \"桌面组名称已存在\",\\n    \"statusCode\": 1\\n}', 'exp_code': 200, 'exp_msg': '操作成功'}" ]
}