{
  "uid" : "b859c3f6b6a3b51",
  "name" : "创建云桌面",
  "fullName" : "test_case.test_api.TestCase#test_autoapi",
  "historyId" : "f094adb6a3e410067ec1e3984ce77f00",
  "time" : {
    "start" : 1611826855750,
    "stop" : 1611826855812,
    "duration" : 62
  },
  "description" : "创建云桌面",
  "descriptionHtml" : "<p>创建云桌面</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 实际结果{\"statusMsg\": \"网络可用IP不足!\", \"detailErrorReason\": \"网络可用IP不足!\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
  "statusTrace" : "self = <test_case.test_api.TestCase object at 0x0000027BA53B88D0>, casedatas = {'caseid': 'FSD0016', 'casestroy': '创建云桌面', 'casetitle': '创建云桌面', 'content-type': None, ...}\n\n    @allure.feature(\"FSD3.2接口测试\")\n    @pytest.mark.parametrize(\"casedatas\",replycls.get_cases())\n    def test_autoapi(self, casedatas):\n        caseid=casedatas['caseid']\n        url= casedatas['url']\n        method=casedatas['method']\n        content_type=casedatas.get('content-type')\n        headers = {\n            \"Authorization\": \"Bearer \" + TOKEN\n        }\n        if content_type:\n            headers[\"content-type\"] = content_type\n        datas = casedatas.get('datas')\n        if datas:\n            datas = json.loads(datas)\n        #前置条件，即用例依赖\n        preconditions=casedatas.get('preconditions')\n        relykeys=casedatas.get('relykey')\n        if relykeys and preconditions:\n            datas=replycls.get_reply_value(preconditions,datas,relykeys)\n            replycls.set_cellvalue(caseid,datas,1)\n    \n        # statusMsg=casedatas['statusMsg']\n        file=casedatas['file']\n        dic_allure={\n            \"title\":casedatas['casetitle'],\n            \"story\":casedatas['casestroy'],\n            \"description\":casedatas['description'],\n            \"exportfile\":casedatas['exportfile']\n        }\n        exp_code=casedatas['exp_code']\n        exp_msg=casedatas['exp_msg']\n        req_code,req_txt= RC.Sendrequest(method,url=url, data=datas,headers=headers ,files=file,Content_Type=content_type,**dic_allure)\n        replycls.set_cellvalue(caseid,req_txt,2)\n        asster.assert_code(req_code,exp_code)\n>       asster.assert_in_body(req_txt,exp_msg)\n\ntest_case\\test_api.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <comn.asserter.Assertion object at 0x0000027BA4DD0A58>, msg = '{\"statusMsg\": \"网络可用IP不足!\", \"detailErrorReason\": \"网络可用IP不足!\", \"statusCode\": 1}', exp_msg = '操作成功'\n\n    def assert_in_body(self,msg,exp_msg):\n        '''\n        断言期望结果是否在实际结果中\n        :param msg:\n        :param exp_msg:\n        :return:\n        '''\n        try:\n            msg=json.dumps(msg,ensure_ascii=False)\n>           assert exp_msg in msg,\"实际结果{}并不包含期望内容,期望内容是{},失败\".format(msg,exp_msg)\nE           AssertionError: 实际结果{\"statusMsg\": \"网络可用IP不足!\", \"detailErrorReason\": \"网络可用IP不足!\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败\n\ncomn\\asserter.py:43: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1611826855749,
      "stop" : 1611826855749,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "创建云桌面",
    "status" : "failed",
    "statusMessage" : "AssertionError: 实际结果{\"statusMsg\": \"网络可用IP不足!\", \"detailErrorReason\": \"网络可用IP不足!\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败",
    "statusTrace" : "self = <test_case.test_api.TestCase object at 0x0000027BA53B88D0>, casedatas = {'caseid': 'FSD0016', 'casestroy': '创建云桌面', 'casetitle': '创建云桌面', 'content-type': None, ...}\n\n    @allure.feature(\"FSD3.2接口测试\")\n    @pytest.mark.parametrize(\"casedatas\",replycls.get_cases())\n    def test_autoapi(self, casedatas):\n        caseid=casedatas['caseid']\n        url= casedatas['url']\n        method=casedatas['method']\n        content_type=casedatas.get('content-type')\n        headers = {\n            \"Authorization\": \"Bearer \" + TOKEN\n        }\n        if content_type:\n            headers[\"content-type\"] = content_type\n        datas = casedatas.get('datas')\n        if datas:\n            datas = json.loads(datas)\n        #前置条件，即用例依赖\n        preconditions=casedatas.get('preconditions')\n        relykeys=casedatas.get('relykey')\n        if relykeys and preconditions:\n            datas=replycls.get_reply_value(preconditions,datas,relykeys)\n            replycls.set_cellvalue(caseid,datas,1)\n    \n        # statusMsg=casedatas['statusMsg']\n        file=casedatas['file']\n        dic_allure={\n            \"title\":casedatas['casetitle'],\n            \"story\":casedatas['casestroy'],\n            \"description\":casedatas['description'],\n            \"exportfile\":casedatas['exportfile']\n        }\n        exp_code=casedatas['exp_code']\n        exp_msg=casedatas['exp_msg']\n        req_code,req_txt= RC.Sendrequest(method,url=url, data=datas,headers=headers ,files=file,Content_Type=content_type,**dic_allure)\n        replycls.set_cellvalue(caseid,req_txt,2)\n        asster.assert_code(req_code,exp_code)\n>       asster.assert_in_body(req_txt,exp_msg)\n\ntest_case\\test_api.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <comn.asserter.Assertion object at 0x0000027BA4DD0A58>, msg = '{\"statusMsg\": \"网络可用IP不足!\", \"detailErrorReason\": \"网络可用IP不足!\", \"statusCode\": 1}', exp_msg = '操作成功'\n\n    def assert_in_body(self,msg,exp_msg):\n        '''\n        断言期望结果是否在实际结果中\n        :param msg:\n        :param exp_msg:\n        :return:\n        '''\n        try:\n            msg=json.dumps(msg,ensure_ascii=False)\n>           assert exp_msg in msg,\"实际结果{}并不包含期望内容,期望内容是{},失败\".format(msg,exp_msg)\nE           AssertionError: 实际结果{\"statusMsg\": \"网络可用IP不足!\", \"detailErrorReason\": \"网络可用IP不足!\", \"statusCode\": 1}并不包含期望内容,期望内容是操作成功,失败\n\ncomn\\asserter.py:43: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3ff95261325f717c",
      "name" : "请求url",
      "source" : "3ff95261325f717c.attach",
      "type" : "text/plain",
      "size" : 51
    }, {
      "uid" : "a0d50d4e5d5ef5d",
      "name" : "请求方式",
      "source" : "a0d50d4e5d5ef5d.attach",
      "type" : "text/plain",
      "size" : 4
    }, {
      "uid" : "78dd34672a32a8be",
      "name" : "请求头",
      "source" : "78dd34672a32a8be.attach",
      "type" : "text/plain",
      "size" : 64
    }, {
      "uid" : "b5e053ee3040f3d5",
      "name" : "请求参数",
      "source" : "b5e053ee3040f3d5.attach",
      "type" : "text/plain",
      "size" : 247
    }, {
      "uid" : "c71f95b5b09154e1",
      "name" : "log",
      "source" : "c71f95b5b09154e1.txt",
      "type" : "text/plain",
      "size" : 357
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 5
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "创建云桌面"
  }, {
    "name" : "feature",
    "value" : "FSD3.2接口测试"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestCase"
  }, {
    "name" : "host",
    "value" : "uy7-lkjhh"
  }, {
    "name" : "thread",
    "value" : "5012-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "casedatas",
    "value" : "{'caseid': 'FSD0016', 'casestroy': '创建云桌面', 'casetitle': '创建云桌面', 'description': '创建云桌面', 'url': '/gateway/inst/instance/create', 'method': 'POST', 'content-type': None, 'datas': '{\\n    \"userIds\": \"532,529\",\\n    \"groupId\": 73,\\n    \"networkId\": 13,\\n    \"networkUUID\": \"f3bfd0cd-fd49-4c97-b489-54cfd160cf10\",\\n    \"rebuildPlot\": 0,\\n    \"instancePlotId\": null,\\n    \"securityGroupId\": 1,\\n    \"volumeSize\": 1,\\n    \"imageId\": 13,\\n    \"memory\": 4,\\n    \"cpuNum\": 4,\\n    \"hardDisk\": 60\\n}', 'statusMsg': None, 'file': None, 'isrun': True, 'relykey': 'groupId,userIds,networkUUID,networkId,securityGroupId,imageId', 'preconditions': 'FSD0003->$.infoData.list[0].id;\\nFSD0011->$.infoData.list[0,1].userId;\\nFSD0014->$.infoData.list[(@.length-1)].networkUUID;\\nFSD0014->$.infoData.list[(@.length-1)].networkId;\\nFSD0012->$.infoData.list[(@.length-1)].id;\\nFSD0013->$.infoData.list[0].id', 'exportfile': None, 'response_data': '{\\n    \"statusMsg\": \"操作成功\",\\n    \"statusCode\": 0\\n}', 'exp_code': 200, 'exp_msg': '操作成功'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "b859c3f6b6a3b51.json",
  "parameterValues" : [ "{'caseid': 'FSD0016', 'casestroy': '创建云桌面', 'casetitle': '创建云桌面', 'description': '创建云桌面', 'url': '/gateway/inst/instance/create', 'method': 'POST', 'content-type': None, 'datas': '{\\n    \"userIds\": \"532,529\",\\n    \"groupId\": 73,\\n    \"networkId\": 13,\\n    \"networkUUID\": \"f3bfd0cd-fd49-4c97-b489-54cfd160cf10\",\\n    \"rebuildPlot\": 0,\\n    \"instancePlotId\": null,\\n    \"securityGroupId\": 1,\\n    \"volumeSize\": 1,\\n    \"imageId\": 13,\\n    \"memory\": 4,\\n    \"cpuNum\": 4,\\n    \"hardDisk\": 60\\n}', 'statusMsg': None, 'file': None, 'isrun': True, 'relykey': 'groupId,userIds,networkUUID,networkId,securityGroupId,imageId', 'preconditions': 'FSD0003->$.infoData.list[0].id;\\nFSD0011->$.infoData.list[0,1].userId;\\nFSD0014->$.infoData.list[(@.length-1)].networkUUID;\\nFSD0014->$.infoData.list[(@.length-1)].networkId;\\nFSD0012->$.infoData.list[(@.length-1)].id;\\nFSD0013->$.infoData.list[0].id', 'exportfile': None, 'response_data': '{\\n    \"statusMsg\": \"操作成功\",\\n    \"statusCode\": 0\\n}', 'exp_code': 200, 'exp_msg': '操作成功'}" ]
}